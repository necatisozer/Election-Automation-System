@model ElectionAutomationSystem.Models.ElectionDatabaseEntities

@{
    ViewBag.Title = "Index";
}
<ol class="breadcrumb">
    <li class="breadcrumb-item">
        <a href="index.html">Election Automation System</a>
    </li>
    <li class="breadcrumb-item active">Homepage</li>
</ol>
<div class="container-fluid">
    <div class="row">
        <div class="col-lg-4">
            <!-- Example Pie Chart Card-->
            <div class="card mb-3">
                <div class="card-header">
                    <i class="fa fa-pie-chart"></i> Election Results (Pie Chart)
                </div>
                <div class="card-body">
                    <canvas id="myPieChart" width="100%" height="108"></canvas>
                </div>
                <div class="card-footer small text-muted">Updated yesterday at 11:59 PM</div>
            </div>
        </div>
        <div class="col-lg-8">
            <!-- Example Bar Chart Card-->
            <div class="card mb-3">
                <div class="card-header">
                    <i class="fa fa-bar-chart"></i> Election Results (Bar Chart)
                </div>
                <div class="card-body">
                    <canvas id="myBarChart" width="100" height="50"></canvas>
                </div>
                <div class="card-footer small text-muted">Updated yesterday at 11:59 PM</div>
            </div>
        </div>
    </div>
    <!-- Area Chart Example-->
    <div class="card mb-3">
        <div class="card-header">
            <i class="fa fa-area-chart"></i> Election Results (Area Chart)
        </div>
        <div class="card-body">
            <canvas id="myAreaChart" width="100%" height="30"></canvas>
        </div>
        <div class="card-footer small text-muted">Updated yesterday at 11:59 PM</div>
    </div>
</div>
<!-- /.container-fluid-->
<!-- /.content-wrapper-->
<!-- Scroll to Top Button-->
<a class="scroll-to-top rounded" href="#page-top">
    <i class="fa fa-angle-up"></i>
</a>
<!-- Logout Modal-->
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Ready to Leave?</h5>
                <button class="close" type="button" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">Select "Logout" below if you are ready to end your current session.</div>
            <div class="modal-footer">
                <button class="btn btn-secondary" type="button" data-dismiss="modal">Cancel</button>
                <a class="btn btn-primary" href="login.html">Logout</a>
            </div>
        </div>
    </div>
</div>
<!-- Page level plugin JavaScript-->
<script src="~/vendor/chart.js/Chart.min.js"></script>
<!-- Custom scripts for this page-->
<!--<script src="js/sb-admin-charts.min.js"></script>-->
<script>
    // -- Default font family and font color
    Chart.defaults.global.defaultFontFamily = '-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif';
    Chart.defaults.global.defaultFontColor = '#292b2c';
    // -- Pie Chart
    var ctx = document.getElementById("myPieChart");
    @{
        var voteCountList = new List<int>();
    }
    var myPieChart = new Chart(ctx, {
        type: 'pie',
        data: {
            labels: [
                @foreach (var party in Model.Parties.ToList())
                {
                    if (party.IsParty)
                    {
                        @:"@party.PartyName",
                        int voteCount = 0;
                        foreach (var vote in Model.Votes.ToList())
                        {
                            if (vote.Party.Equals(party))
                            {
                                voteCount += vote.VoteCount;
                            }
                        }
                        voteCountList.Add(voteCount);
                    }
                }
            ],
            datasets: [{
                data: [
                    @foreach (var voteCount in voteCountList)
                    {
                        @:@voteCount,
                    }
                ],
                backgroundColor: ['#007bff', '#dc3545', '#ffc107', '#28a745', '#9966CC', '#DE5D83', '#964B00','#00FFFF'],
            }],
        },
    });
    // -- Bar Chart
    var ctx = document.getElementById("myBarChart");
    var myLineChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: [
                @foreach (var party in Model.Parties.ToList())
                {
                    if (party.IsParty)
                    {
                        @:"@party.PartyName",
                    }
                }
            ],
            datasets: [{
                label: "Votes",
                backgroundColor: "rgba(2,117,216,1)",
                borderColor: "rgba(2,117,216,1)",
                data: [
                    @foreach (var voteCount in voteCountList)
                    {
                        @:@voteCount,
                    }
                ],
            }],
        },
        options: {
            scales: {
                xAxes: [{
                    time: {
                        unit: 'month'
                    },
                    gridLines: {
                        display: false
                    },
                    ticks: {
                        maxTicksLimit: 6
                    }
                }],
                yAxes: [{
                    ticks: {
                        min: 0,
                        @{
                            int maxValue = voteCountList.Max(voteCount => voteCount);
                            int topOfBar = maxValue + 1000 - maxValue % 1000;
                        }
                        max: @topOfBar,
                        maxTicksLimit: 5
                    },
                    gridLines: {
                        display: true
                    }
                }],
            },
            legend: {
                display: false
            }
        }
    });
    // -- Area Chart
    var ctx = document.getElementById("myAreaChart");
    var myLineChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: [
                @foreach (var party in Model.Parties.ToList())
                {
                    if (party.IsParty)
                    {
                        @:"@party.PartyName",
                    }
                }
            ],
            datasets: [{
                label: "Votes",
                lineTension: 0.3,
                backgroundColor: "rgba(2,117,216,0.2)",
                borderColor: "rgba(2,117,216,1)",
                pointRadius: 5,
                pointBackgroundColor: "rgba(2,117,216,1)",
                pointBorderColor: "rgba(255,255,255,0.8)",
                pointHoverRadius: 5,
                pointHoverBackgroundColor: "rgba(2,117,216,1)",
                pointHitRadius: 20,
                pointBorderWidth: 2,
                data: [
                    @foreach (var voteCount in voteCountList)
                    {
                        @:@voteCount,
                    }
                ],
            }],
        },
        options: {
            scales: {
                xAxes: [{
                    time: {
                        unit: 'date'
                    },
                    gridLines: {
                        display: false
                    },
                    ticks: {
                        maxTicksLimit: 7
                    }
                }],
                yAxes: [{
                    ticks: {
                        min: 0,
                        max: @topOfBar,
                        maxTicksLimit: 5
                    },
                    gridLines: {
                        color: "rgba(0, 0, 0, .125)",
                    }
                }],
            },
            legend: {
                display: false
            }
        }
    });
</script>
